Index: elf2hunk/elf2hunk.c
===================================================================
--- elf2hunk.orig/elf2hunk.c
+++ elf2hunk/elf2hunk.c
@@ -880,7 +880,7 @@ int elf2hunk(int file, int hunk_fd, cons
     	if (hh[i]==NULL || hh[i]->hunk < 0)
     	    continue;
 
-    	count = (hh[i]->size + 4) / 4;
+    	count = (hh[i]->size + 3) / 4;
     	switch (hh[i]->memflags) {
     	case MEMF_CHIP:
     	    count |= HUNKF_CHIP;
@@ -895,7 +895,7 @@ int elf2hunk(int file, int hunk_fd, cons
     	    break;
     	}
 
-    	D(bug("\tHunk #%d, %s, lsize=%d\n", hh[i]->hunk, names[hh[i]->type - HUNK_CODE], (int)(hh[i]->size+4)/4));
+    	D(bug("\tHunk #%d, %s, lsize=%d\n", hh[i]->hunk, names[hh[i]->type - HUNK_CODE], (int)(hh[i]->size + 3) / 4));
     	wlong(hunk_fd, count);
 
     	if ((count & HUNKF_MEMFLAGS) == HUNKF_MEMFLAGS)
@@ -910,11 +910,11 @@ int elf2hunk(int file, int hunk_fd, cons
     	    continue;
 
     	wlong(hunk_fd, hh[i]->type);
-    	wlong(hunk_fd, (hh[i]->size + 4) / 4);
+    	wlong(hunk_fd, (hh[i]->size + 3) / 4);
 
     	switch (hh[i]->type) {
     	case HUNK_BSS:
-          D(bug("HUNK_BSS: %d longs\n", (int)((hh[i]->size + 4) / 4)));
+          D(bug("HUNK_BSS: %d longs\n", (int)((hh[i]->size + 3) / 4)));
           if (cmdline_flags & F_SYMBOLS) {
               for (s = 0; s < int_shnum; s++) {
                   if (hh[s] && hh[s]->type == HUNK_SYMBOL)
@@ -927,8 +927,8 @@ int elf2hunk(int file, int hunk_fd, cons
     	    break;
     	case HUNK_CODE:
     	case HUNK_DATA:
-    	    D(bug("#%d HUNK_%s: %d longs\n", hh[i]->hunk, hh[i]->type == HUNK_CODE ? "CODE" : "DATA", (int)((hh[i]->size + 4) / 4)));
-    	    err = write(hunk_fd, hh[i]->data, ((hh[i]->size + 4)/4)*4);
+    	    D(bug("#%d HUNK_%s: %d longs\n", hh[i]->hunk, hh[i]->type == HUNK_CODE ? "CODE" : "DATA", (int)((hh[i]->size + 3) / 4)));
+    	    err = write(hunk_fd, hh[i]->data, ((hh[i]->size + 3)/4)*4);
     	    if (err < 0)
     	    	return EXIT_FAILURE;
           if (cmdline_flags & F_SYMBOLS) {
