Index: elf2hunk/elf2hunk.c
===================================================================
--- elf2hunk.orig/elf2hunk.c
+++ elf2hunk/elf2hunk.c
@@ -1,6 +1,8 @@
 /*
     Copyright © 1995-2019, The AROS Development Team. All rights reserved.
     $Id$
+
+    Modified by Krystian Baclawski to support executable files with relocs.
 */
 
 #define PROTOTYPES
@@ -284,7 +286,7 @@ static int must_swap = -1;
 static void eh_fixup(struct elfheader *eh)
 {
     /* Endian swaps */
-    if (eh->type == 256) {
+    if (eh->type >= 256) {
     	must_swap = 1;
     	eh->type = ntohs(eh->type);
     	eh->machine = ntohs(eh->machine);
@@ -424,14 +426,14 @@ static int load_header(int file, struct
     /* WANT_CLASS should be defined for your target */
     if (eh->ident[EI_CLASS]   != AROS_ELF_CLASS  ||
         eh->ident[EI_VERSION] != EV_CURRENT      ||
-        eh->type              != ET_REL          ||
+        (eh->type != ET_REL && eh->type != ET_EXEC) ||
         eh->ident[EI_DATA]    != AROS_ELF_DATA   ||
         eh->machine           != AROS_ELF_MACHINE)
     {
         D(bug("[ELF2HUNK] Object is of wrong type\n"));
         D(bug("[ELF2HUNK] EI_CLASS   is %d - should be %d\n", eh->ident[EI_CLASS]  , AROS_ELF_CLASS ));
         D(bug("[ELF2HUNK] EI_VERSION is %d - should be %d\n", eh->ident[EI_VERSION], EV_CURRENT     ));
-        D(bug("[ELF2HUNK] type       is %d - should be %d\n", eh->type             , ET_REL         ));
+        D(bug("[ELF2HUNK] type       is %d - should be %d or %d\n", eh->type       , ET_REL, ET_EXEC));
         D(bug("[ELF2HUNK] EI_DATA    is %d - should be %d\n", eh->ident[EI_DATA]   , AROS_ELF_DATA  ));
         D(bug("[ELF2HUNK] machine    is %d - should be %d\n", eh->machine          , AROS_ELF_MACHINE));
 
@@ -513,7 +515,7 @@ static int relocate
 
 	sym = symtab[ELF_R_SYM(rel->info)];
 	sym_fixup(&sym);
-	offset = rel->offset;
+        offset = rel->offset - toreloc->addr;
 	symname = (const char *)(hh[shsymtab->link]->data + sym.name);
 
         if (sym.shindex != SHN_XINDEX)
@@ -586,10 +588,14 @@ static int relocate
         }
 
 	D(bug("[ELF2HUNK]   shid %d, offset 0x%x: base 0x%x\n", (int)shid, (int)offset, (int)value));
-        *(ULONG *)(h->data + offset) = htonl(value + ntohl(*(ULONG *)(h->data + offset)));
         if (shid == ~0) {
     	    h->relocs--;
     	    continue;
+        } else {
+            *(ULONG *)(h->data + offset) = htonl(
+                (eh->type == ET_REL) ?
+                    (value + ntohl(*(ULONG *)(h->data + offset))) :
+                    (value - sh[shid].addr));
         }
         hrel->shid = shid;
         hrel->offset = offset;
@@ -1094,3 +1100,5 @@ int main(int argc, char **argv)
 
     return copy(argv[1], argv[2], flags);
 }
+
+/* vim: set ts=8 sw=8: */
